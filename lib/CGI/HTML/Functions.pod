=head1 NAME

CGI::HTML::Functions - Documentation for CGI.pm Legacy HTML Functionality

=head1 SYNOPIS

Nothing here - please do not use this functionality, it is considered to
be legacy and essentially deprecated. This documentation exists solely to
aid in maintenance and migration of legacy code using this functionality.

This functionality is likely to be removed in future versions of CGI.pm so
you are strongly encouraged to migrate away from it. If you are working
on new code you should be using a template engine. For more information see
L<CGI::Alternatives>.

=head1 DESCRIPTION

The documentation here should be considered an addendum to the sections in the
L<CGI> documentation - the sections here are named the same as those within the
CGI perldoc.

=head1 Calling CGI.pm routines

HTML tag functions have both attributes (the attribute="value" pairs within the
tag itself) and contents (the part between the opening and closing pairs). To
distinguish between attributes and contents, CGI.pm uses the convention of
passing HTML attributes as a hash reference as the first argument, and the
contents, if any, as any subsequent arguments.  It works out like
this:

    Code                           Generated HTML
    ----                           --------------
    h1()                           <h1 />
    h1('some','contents');         <h1>some contents</h1>
    h1({-align=>left});            <h1 align="LEFT">
    h1({-align=>left},'contents'); <h1 align="LEFT">contents</h1>

Many newcomers to CGI.pm are puzzled by the difference between the calling
conventions for the HTML shortcuts, which require curly braces around the HTML
tag attributes, and the calling conventions for other routines, which manage
to generate attributes without the curly brackets. Don't be confused. As a
convenience the curly braces are optional in all but the HTML shortcuts. If you
like, you can use curly braces when calling any routine that takes named
arguments. For example:

    print $q->header( { -type => 'image/gif', -expires => '+3d' } );

If you use warnings, you will be warned that some CGI.pm argument names
conflict with built-in perl functions. The most frequent of these is the
-values argument, used to create multi-valued menus, radio button clusters
and the like. To get around this warning, you have several choices:

=over 4

=item 1.

Use another name for the argument, if one is available. 
For example, -value is an alias for -values.

=item 2.

Change the capitalization, e.g. -Values

=item 3.

Put quotes around the argument name, e.g. '-values'

=back

=head2 Function-oriented interface HTML exports

Here is a list of the HTML related function sets you can import:

=over 4

=item B<:form>

Import all fill-out form generating methods, such as B<textfield()>.

=item B<:html2>

Import all methods that generate HTML 2.0 standard elements.

=item B<:html3>

Import all methods that generate HTML 3.0 elements (such as
<table>, <super> and <sub>).

=item B<:html4>

Import all methods that generate HTML 4 elements (such as
<abbrev>, <acronym> and <thead>).

=item B<:netscape>

Import the <blink>, <fontsize> and <center> tags. 

=item B<:html>

Import all HTML-generating shortcuts (i.e. 'html2', 'html3', 'html4' and 'netscape')

=item B<:standard>

Import "standard" features, 'html2', 'html3', 'html4', 'ssl', 'form' and 'cgi'.

=back

If you import any of the state-maintaining CGI or form-generating methods,
a default CGI object will be created and initialized automatically the first
time you use any of the methods that require one to be present. This includes
B<param()>, B<textfield()>, B<submit()> and the like. (If you need direct access
to the CGI object, you can find it in the global variable B<$CGI::Q>).

=head2 Pragmas

Additional HTML generation related pragms:

=over 4

=item -nosticky

By default the CGI module implements a state-preserving behavior called
"sticky" fields. The way this works is that if you are regenerating a form,
the methods that generate the form field values will interrogate param()
to see if similarly-named parameters are present in the query string. If
they find a like-named parameter, they will use it to set their default values.

Sometimes this isn't what you want. The B<-nosticky> pragma prevents this
behavior. You can also selectively change the sticky behavior in each element
that you generate.

=item -tabindex

Automatically add tab index attributes to each form field. With this option
turned off, you can still add tab indexes manually by passing a -tabindex
option to each field-generating method.

=item -no_xhtml

By default, CGI.pm versions 2.69 and higher emit XHTML
(http://www.w3.org/TR/xhtml1/). The -no_xhtml pragma disables this feature.
Thanks to Michalis Kabrianis <kabrianis@hellug.gr> for this feature.

If start_html()'s -dtd parameter specifies an HTML 2.0, 3.2, 4.0 or 4.01 DTD,
XHTML will automatically be disabled without needing to use this pragma.

=back

=head2 Special forms for importing HTML-tag functions

Many of the methods generate HTML tags. As described below, tag functions
automatically generate both the opening and closing tags. For example:

    print h1('Level 1 Header');

produces

    <h1>Level 1 Header</h1>

There will be some times when you want to produce the start and end tags
yourself. In this case, you can use the form start_I<tag_name> and
end_I<tag_name>, as in:

    print start_h1,'Level 1 Header',end_h1;

=head2 Creating the HTML document header

    print start_html(
        -title      => 'Secrets of the Pyramids',
        -author     => 'fred@capricorn.org',
        -base       => 'true',
        -target     => '_blank',
        -meta       => {'keywords'=>'pharaoh secret mummy',
        'copyright' => 'copyright 1996 King Tut'},
        -style      => {'src'=>'/styles/style1.css'},
        -BGCOLOR    => 'blue'
    );

The start_html() routine creates the top of the page, along with a lot of
optional information that controls the page's appearance and behavior.

This method returns a canned HTML header and the opening <body> tag. All
parameters are optional. In the named parameter form, recognized parameters
are -title, -author, -base, -xbase, -dtd, -lang and -target (see below for the
explanation). Any additional parameters you provide, such as the unofficial
BGCOLOR attribute, are added to the <body> tag. Additional parameters must be
proceeded by a hyphen.

The argument B<-xbase> allows you to provide an HREF for the <base> tag different
from the current location, as in

    -xbase => "http://home.mcom.com/"

All relative links will be interpreted relative to this tag.

The argument B<-target> allows you to provide a default target frame for all the
links and fill-out forms on the page. B<This is a non-standard HTTP feature>
B<which only works with some browsers!>

    -target => "answer_window"

All relative links will be interpreted relative to this tag.  You add arbitrary
meta information to the header with the B<-meta> argument. This argument expects
a reference to a hash containing name/value pairs of meta information. These will
be turned into a series of header <meta> tags that look something like this:

    <meta name="keywords" content="pharaoh secret mummy">
    <meta name="description" content="copyright 1996 King Tut">

To create an HTTP-EQUIV type of <meta> tag, use B<-head>, described below.

The B<-style> argument is used to incorporate cascading stylesheets into your
code. See the section on CASCADING STYLESHEETS for more information.

The B<-lang> argument is used to incorporate a language attribute into the <html>
tag. For example:

    print $q->start_html( -lang => 'fr-CA' );

The default if not specified is "en-US" for US English, unless the -dtd parameter
specifies an HTML 2.0 or 3.2 DTD, in which case the lang attribute is left off.
You can force the lang attribute to left off in other cases by passing an empty
string (-lang=>'').

The B<-encoding> argument can be used to specify the character set for XHTML. It
defaults to iso-8859-1 if not specified.

The B<-dtd> argument can be used to specify a public DTD identifier string. For
example:

    -dtd => '-//W3C//DTD HTML 4.01 Transitional//EN')

Alternatively, it can take public and system DTD identifiers as an array:

    -dtd => [
        '-//W3C//DTD HTML 4.01 Transitional//EN',
        'http://www.w3.org/TR/html4/loose.dtd'
    ]

For the public DTD identifier to be considered, it must be valid. Otherwise it
will be replaced by the default DTD. If the public DTD contains 'XHTML', CGI.pm
will emit XML.

The B<-declare_xml> argument, when used in conjunction with XHTML, will put a
<?xml> declaration at the top of the HTML header. The sole purpose of this
declaration is to declare the character set encoding. In the absence of
-declare_xml, the output HTML will contain a <meta> tag that specifies the
encoding, allowing the HTML to pass most validators. The default for -declare_xml
is false.

You can place other arbitrary HTML elements to the <head> section with the
B<-head> tag.  For example, to place a <link> element in the head section, use
this:

    print start_html(
        -head => Link({
            -rel  => 'shortcut icon',
            -href => 'favicon.ico'
        })
    );

To incorporate multiple HTML elements into the <head> section, just pass an
array reference:

    print start_html(
        -head => [
            Link({
                -rel  => 'next',
                -href => 'http://www.capricorn.com/s2.html'
            }),
            Link({
                -rel  => 'previous',
                -href => 'http://www.capricorn.com/s1.html'
            })
        ]
    );

And here's how to create an HTTP-EQUIV <meta> tag:

    print start_html(
        -head => meta({
            -http_equiv => 'Content-Type',
            -content    => 'text/html'
        })
    );


JAVASCRIPTING: The B<-script>, B<-noScript>, B<-onLoad>, B<-onMouseOver>,
B<-onMouseOut> and B<-onUnload> parameters are used to add JavaScript calls to
your pages. B<-script> should point to a block of text containing JavaScript
function definitions. This block will be placed within a <script> block inside
the HTML (not HTTP) header. The block is placed in the header in order to give
your page a fighting chance of having all its JavaScript functions in place even
if the user presses the stop button before the page has loaded completely. CGI.pm
attempts to format the script in such a way that JavaScript-naive browsers will
not choke on the code: unfortunately there are some browsers, such as Chimera for
Unix, that get confused by it nevertheless.

The B<-onLoad> and B<-onUnload> parameters point to fragments of JavaScript code
to execute when the page is respectively opened and closed by the browser.
Usually these parameters are calls to functions defined in the B<-script> field:

    $query = CGI->new;
    print header;
    $JSCRIPT = <<END;
        // Ask a silly question
        function riddle_me_this() {
            var r = prompt(
                "What walks on four legs in the morning, " +
                "two legs in the afternoon, " +
                "and three legs in the evening?"
            );
            response(r);
        }
        // Get a silly answer
        function response(answer) {
            if (answer == "man")
                alert("Right you are!");
            else
                alert("Wrong!  Guess again.");
        }
    END
    print start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => $JSCRIPT
    );

Use the B<-noScript> parameter to pass some HTML text that will be displayed on 
browsers that do not have JavaScript (or browsers where JavaScript is turned
off).

The <script> tag, has several attributes including "type", "charset" and "src".
"src" allows you to keep JavaScript code in an external file. To use these
attributes pass a HASH reference in the B<-script> parameter containing one or
more of -type, -src, or -code:

    print $q->start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => {
            -type => 'JAVASCRIPT',
            -src  => '/javascript/sphinx.js'}
        );

    print $q->(
        -title  => 'The Riddle of the Sphinx',
        -script => {
            -type => 'PERLSCRIPT',
            -code => 'print "hello world!\n;"'
        }
    );

A final feature allows you to incorporate multiple <script> sections into the
header. Just pass the list of script sections as an array reference. This allows
you to specify different source files for different dialects of JavaScript.
Example:

    print $q->start_html(
        -title  => 'The Riddle of the Sphinx',
        -script => [
            {
                -type => 'text/javascript',
                -src  => '/javascript/utilities10.js'
            },
            {
                -type => 'text/javascript',
                -src  => '/javascript/utilities11.js'
            },
            {
                -type => 'text/jscript',
                -src  => '/javascript/utilities12.js'
            },
            {
                -type => 'text/ecmascript',
                -src  => '/javascript/utilities219.js'
            }
        ]
    );

The option "-language" is a synonym for -type, and is supported for backwards
compatibility.

The old-style positional parameters are as follows:

B<Parameters:>

=over 4

=item 1.

The title

=item 2.

The author's e-mail address (will create a <link rev="MADE"> tag if present

=item 3.

A 'true' flag if you want to include a <base> tag in the header. This helps
resolve relative addresses to absolute ones when the document is moved, but
makes the document hierarchy non-portable. Use with care!

=back

Other parameters you want to include in the <body> tag may be appended to these.
This is a good place to put HTML extensions, such as colors and wallpaper
patterns.

=head2 Ending the Html document:

    print $q->end_html;

This ends an HTML document by printing the </body></html> tags.



=head1 BUGS

Address bug reports and comments to: L<https://github.com/leejo/CGI.pm/issues>

The original bug tracker can be found at: L<https://rt.cpan.org/Public/Dist/Display.html?Queue=CGI.pm>

However as stated this functionality is no longer being maintained and is
considered deprecated. Any feature requests, bug reports, issues, pull
requests, etc, for this functionality will almost certainly be closed without
any action being taken place - this includes fixes to utterly broken page
rendering, invalid HTML, nonsensical output, and annoyances.

=head1 SEE ALSO

L<CGI> - The original source of this functionality

=cut
